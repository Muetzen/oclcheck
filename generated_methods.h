// This file is automatically generated, do not edit.


cl_int
clGetPlatformIDs
	(
		cl_uint num_entries ,
		cl_platform_id * platforms ,
		cl_uint * num_platforms 
	)
{
	initialize ();
	std::cerr << "OCL> clGetPlatformIDs ()\n";	cl_int(* origMethod)
	(
		cl_uint num_entries ,
		cl_platform_id * platforms ,
		cl_uint * num_platforms 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetPlatformIDs"));
	cl_int returnValue;
	returnValue = origMethod (
		num_entries,
		platforms,
		num_platforms
	);
	return returnValue;
}


cl_int
clGetPlatformInfo
	(
		cl_platform_id platform ,
		cl_platform_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clGetPlatformInfo ()\n";	cl_int(* origMethod)
	(
		cl_platform_id platform ,
		cl_platform_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetPlatformInfo"));
	cl_int returnValue;
	returnValue = origMethod (
		platform,
		param_name,
		param_value_size,
		param_value,
		param_value_size_ret
	);
	return returnValue;
}


cl_int
clGetDeviceIDs
	(
		cl_platform_id platform ,
		cl_device_type device_type ,
		cl_uint num_entries ,
		cl_device_id * devices ,
		cl_uint * num_devices 
	)
{
	initialize ();
	std::cerr << "OCL> clGetDeviceIDs ()\n";	cl_int(* origMethod)
	(
		cl_platform_id platform ,
		cl_device_type device_type ,
		cl_uint num_entries ,
		cl_device_id * devices ,
		cl_uint * num_devices 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetDeviceIDs"));
	cl_int returnValue;
	returnValue = origMethod (
		platform,
		device_type,
		num_entries,
		devices,
		num_devices
	);
	return returnValue;
}


cl_int
clGetDeviceInfo
	(
		cl_device_id device ,
		cl_device_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clGetDeviceInfo ()\n";	cl_int(* origMethod)
	(
		cl_device_id device ,
		cl_device_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetDeviceInfo"));
	cl_int returnValue;
	returnValue = origMethod (
		device,
		param_name,
		param_value_size,
		param_value,
		param_value_size_ret
	);
	return returnValue;
}


cl_int
clCreateSubDevices
	(
		cl_device_id in_device ,
		const cl_device_partition_property * properties ,
		cl_uint num_devices ,
		cl_device_id * out_devices ,
		cl_uint * num_devices_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateSubDevices ()\n";	cl_int(* origMethod)
	(
		cl_device_id in_device ,
		const cl_device_partition_property * properties ,
		cl_uint num_devices ,
		cl_device_id * out_devices ,
		cl_uint * num_devices_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateSubDevices"));
	cl_int returnValue;
	returnValue = origMethod (
		in_device,
		properties,
		num_devices,
		out_devices,
		num_devices_ret
	);
	return returnValue;
}


cl_int
clRetainDevice
	(
		cl_device_id device 
	)
{
	initialize ();
	std::cerr << "OCL> clRetainDevice ()\n";	cl_int(* origMethod)
	(
		cl_device_id device 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clRetainDevice"));
	cl_int returnValue;
	returnValue = origMethod (
		device
	);
	return returnValue;
}


cl_int
clReleaseDevice
	(
		cl_device_id device 
	)
{
	initialize ();
	std::cerr << "OCL> clReleaseDevice ()\n";	cl_int(* origMethod)
	(
		cl_device_id device 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clReleaseDevice"));
	cl_int returnValue;
	returnValue = origMethod (
		device
	);
	return returnValue;
}


cl_int
clSetDefaultDeviceCommandQueue
	(
		cl_context context ,
		cl_device_id device ,
		cl_command_queue command_queue 
	)
{
	initialize ();
	std::cerr << "OCL> clSetDefaultDeviceCommandQueue ()\n";	cl_int(* origMethod)
	(
		cl_context context ,
		cl_device_id device ,
		cl_command_queue command_queue 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clSetDefaultDeviceCommandQueue"));
	cl_int returnValue;
	returnValue = origMethod (
		context,
		device,
		command_queue
	);
	return returnValue;
}


cl_int
clGetDeviceAndHostTimer
	(
		cl_device_id device ,
		cl_ulong * device_timestamp ,
		cl_ulong * host_timestamp 
	)
{
	initialize ();
	std::cerr << "OCL> clGetDeviceAndHostTimer ()\n";	cl_int(* origMethod)
	(
		cl_device_id device ,
		cl_ulong * device_timestamp ,
		cl_ulong * host_timestamp 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetDeviceAndHostTimer"));
	cl_int returnValue;
	returnValue = origMethod (
		device,
		device_timestamp,
		host_timestamp
	);
	return returnValue;
}


cl_int
clGetHostTimer
	(
		cl_device_id device ,
		cl_ulong * host_timestamp 
	)
{
	initialize ();
	std::cerr << "OCL> clGetHostTimer ()\n";	cl_int(* origMethod)
	(
		cl_device_id device ,
		cl_ulong * host_timestamp 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetHostTimer"));
	cl_int returnValue;
	returnValue = origMethod (
		device,
		host_timestamp
	);
	return returnValue;
}


cl_context
clCreateContext
	(
		const cl_context_properties * properties ,
		cl_uint num_devices ,
		const cl_device_id * devices ,
		void * user_data ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateContext ()\n";	cl_context(* origMethod)
	(
		const cl_context_properties * properties ,
		cl_uint num_devices ,
		const cl_device_id * devices ,
		void * user_data ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateContext"));
	cl_context returnValue;
	returnValue = origMethod (
		properties,
		num_devices,
		devices,
		user_data,
		errcode_ret
	);
	return returnValue;
}


cl_context
clCreateContextFromType
	(
		const cl_context_properties * properties ,
		cl_device_type device_type ,
		void * user_data ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateContextFromType ()\n";	cl_context(* origMethod)
	(
		const cl_context_properties * properties ,
		cl_device_type device_type ,
		void * user_data ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateContextFromType"));
	cl_context returnValue;
	returnValue = origMethod (
		properties,
		device_type,
		user_data,
		errcode_ret
	);
	return returnValue;
}


cl_int
clRetainContext
	(
		cl_context context 
	)
{
	initialize ();
	std::cerr << "OCL> clRetainContext ()\n";	cl_int(* origMethod)
	(
		cl_context context 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clRetainContext"));
	cl_int returnValue;
	returnValue = origMethod (
		context
	);
	return returnValue;
}


cl_int
clReleaseContext
	(
		cl_context context 
	)
{
	initialize ();
	std::cerr << "OCL> clReleaseContext ()\n";	cl_int(* origMethod)
	(
		cl_context context 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clReleaseContext"));
	cl_int returnValue;
	returnValue = origMethod (
		context
	);
	return returnValue;
}


cl_int
clGetContextInfo
	(
		cl_context context ,
		cl_context_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clGetContextInfo ()\n";	cl_int(* origMethod)
	(
		cl_context context ,
		cl_context_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetContextInfo"));
	cl_int returnValue;
	returnValue = origMethod (
		context,
		param_name,
		param_value_size,
		param_value,
		param_value_size_ret
	);
	return returnValue;
}


cl_int
clSetContextDestructorCallback
	(
		cl_context context ,
		void * user_data 
	)
{
	initialize ();
	std::cerr << "OCL> clSetContextDestructorCallback ()\n";	cl_int(* origMethod)
	(
		cl_context context ,
		void * user_data 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clSetContextDestructorCallback"));
	cl_int returnValue;
	returnValue = origMethod (
		context,
		user_data
	);
	return returnValue;
}


cl_command_queue
clCreateCommandQueueWithProperties
	(
		cl_context context ,
		cl_device_id device ,
		const cl_queue_properties * properties ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateCommandQueueWithProperties ()\n";	cl_command_queue(* origMethod)
	(
		cl_context context ,
		cl_device_id device ,
		const cl_queue_properties * properties ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateCommandQueueWithProperties"));
	cl_command_queue returnValue;
	returnValue = origMethod (
		context,
		device,
		properties,
		errcode_ret
	);
	return returnValue;
}


cl_int
clRetainCommandQueue
	(
		cl_command_queue command_queue 
	)
{
	initialize ();
	std::cerr << "OCL> clRetainCommandQueue ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clRetainCommandQueue"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue
	);
	return returnValue;
}


cl_int
clReleaseCommandQueue
	(
		cl_command_queue command_queue 
	)
{
	initialize ();
	std::cerr << "OCL> clReleaseCommandQueue ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clReleaseCommandQueue"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue
	);
	return returnValue;
}


cl_int
clGetCommandQueueInfo
	(
		cl_command_queue command_queue ,
		cl_command_queue_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clGetCommandQueueInfo ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_command_queue_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetCommandQueueInfo"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		param_name,
		param_value_size,
		param_value,
		param_value_size_ret
	);
	return returnValue;
}


cl_mem
clCreateBuffer
	(
		cl_context context ,
		cl_mem_flags flags ,
		size_t size ,
		void * host_ptr ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateBuffer ()\n";	cl_mem(* origMethod)
	(
		cl_context context ,
		cl_mem_flags flags ,
		size_t size ,
		void * host_ptr ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateBuffer"));
	cl_mem returnValue;
	returnValue = origMethod (
		context,
		flags,
		size,
		host_ptr,
		errcode_ret
	);
	return returnValue;
}


cl_mem
clCreateSubBuffer
	(
		cl_mem buffer ,
		cl_mem_flags flags ,
		cl_buffer_create_type buffer_create_type ,
		const void * buffer_create_info ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateSubBuffer ()\n";	cl_mem(* origMethod)
	(
		cl_mem buffer ,
		cl_mem_flags flags ,
		cl_buffer_create_type buffer_create_type ,
		const void * buffer_create_info ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateSubBuffer"));
	cl_mem returnValue;
	returnValue = origMethod (
		buffer,
		flags,
		buffer_create_type,
		buffer_create_info,
		errcode_ret
	);
	return returnValue;
}


cl_mem
clCreateImage
	(
		cl_context context ,
		cl_mem_flags flags ,
		const cl_image_format * image_format ,
		const cl_image_desc * image_desc ,
		void * host_ptr ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateImage ()\n";	cl_mem(* origMethod)
	(
		cl_context context ,
		cl_mem_flags flags ,
		const cl_image_format * image_format ,
		const cl_image_desc * image_desc ,
		void * host_ptr ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateImage"));
	cl_mem returnValue;
	returnValue = origMethod (
		context,
		flags,
		image_format,
		image_desc,
		host_ptr,
		errcode_ret
	);
	return returnValue;
}


cl_mem
clCreatePipe
	(
		cl_context context ,
		cl_mem_flags flags ,
		cl_uint pipe_packet_size ,
		cl_uint pipe_max_packets ,
		const cl_pipe_properties * properties ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreatePipe ()\n";	cl_mem(* origMethod)
	(
		cl_context context ,
		cl_mem_flags flags ,
		cl_uint pipe_packet_size ,
		cl_uint pipe_max_packets ,
		const cl_pipe_properties * properties ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreatePipe"));
	cl_mem returnValue;
	returnValue = origMethod (
		context,
		flags,
		pipe_packet_size,
		pipe_max_packets,
		properties,
		errcode_ret
	);
	return returnValue;
}


cl_mem
clCreateBufferWithProperties
	(
		cl_context context ,
		const cl_mem_properties * properties ,
		cl_mem_flags flags ,
		size_t size ,
		void * host_ptr ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateBufferWithProperties ()\n";	cl_mem(* origMethod)
	(
		cl_context context ,
		const cl_mem_properties * properties ,
		cl_mem_flags flags ,
		size_t size ,
		void * host_ptr ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateBufferWithProperties"));
	cl_mem returnValue;
	returnValue = origMethod (
		context,
		properties,
		flags,
		size,
		host_ptr,
		errcode_ret
	);
	return returnValue;
}


cl_mem
clCreateImageWithProperties
	(
		cl_context context ,
		const cl_mem_properties * properties ,
		cl_mem_flags flags ,
		const cl_image_format * image_format ,
		const cl_image_desc * image_desc ,
		void * host_ptr ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateImageWithProperties ()\n";	cl_mem(* origMethod)
	(
		cl_context context ,
		const cl_mem_properties * properties ,
		cl_mem_flags flags ,
		const cl_image_format * image_format ,
		const cl_image_desc * image_desc ,
		void * host_ptr ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateImageWithProperties"));
	cl_mem returnValue;
	returnValue = origMethod (
		context,
		properties,
		flags,
		image_format,
		image_desc,
		host_ptr,
		errcode_ret
	);
	return returnValue;
}


cl_int
clRetainMemObject
	(
		cl_mem memobj 
	)
{
	initialize ();
	std::cerr << "OCL> clRetainMemObject ()\n";	cl_int(* origMethod)
	(
		cl_mem memobj 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clRetainMemObject"));
	cl_int returnValue;
	returnValue = origMethod (
		memobj
	);
	return returnValue;
}


cl_int
clReleaseMemObject
	(
		cl_mem memobj 
	)
{
	initialize ();
	std::cerr << "OCL> clReleaseMemObject ()\n";	cl_int(* origMethod)
	(
		cl_mem memobj 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clReleaseMemObject"));
	cl_int returnValue;
	returnValue = origMethod (
		memobj
	);
	return returnValue;
}


cl_int
clGetSupportedImageFormats
	(
		cl_context context ,
		cl_mem_flags flags ,
		cl_mem_object_type image_type ,
		cl_uint num_entries ,
		cl_image_format * image_formats ,
		cl_uint * num_image_formats 
	)
{
	initialize ();
	std::cerr << "OCL> clGetSupportedImageFormats ()\n";	cl_int(* origMethod)
	(
		cl_context context ,
		cl_mem_flags flags ,
		cl_mem_object_type image_type ,
		cl_uint num_entries ,
		cl_image_format * image_formats ,
		cl_uint * num_image_formats 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetSupportedImageFormats"));
	cl_int returnValue;
	returnValue = origMethod (
		context,
		flags,
		image_type,
		num_entries,
		image_formats,
		num_image_formats
	);
	return returnValue;
}


cl_int
clGetMemObjectInfo
	(
		cl_mem memobj ,
		cl_mem_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clGetMemObjectInfo ()\n";	cl_int(* origMethod)
	(
		cl_mem memobj ,
		cl_mem_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetMemObjectInfo"));
	cl_int returnValue;
	returnValue = origMethod (
		memobj,
		param_name,
		param_value_size,
		param_value,
		param_value_size_ret
	);
	return returnValue;
}


cl_int
clGetImageInfo
	(
		cl_mem image ,
		cl_image_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clGetImageInfo ()\n";	cl_int(* origMethod)
	(
		cl_mem image ,
		cl_image_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetImageInfo"));
	cl_int returnValue;
	returnValue = origMethod (
		image,
		param_name,
		param_value_size,
		param_value,
		param_value_size_ret
	);
	return returnValue;
}


cl_int
clGetPipeInfo
	(
		cl_mem pipe ,
		cl_pipe_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clGetPipeInfo ()\n";	cl_int(* origMethod)
	(
		cl_mem pipe ,
		cl_pipe_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetPipeInfo"));
	cl_int returnValue;
	returnValue = origMethod (
		pipe,
		param_name,
		param_value_size,
		param_value,
		param_value_size_ret
	);
	return returnValue;
}


cl_int
clSetMemObjectDestructorCallback
	(
		cl_mem memobj ,
		void * user_data 
	)
{
	initialize ();
	std::cerr << "OCL> clSetMemObjectDestructorCallback ()\n";	cl_int(* origMethod)
	(
		cl_mem memobj ,
		void * user_data 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clSetMemObjectDestructorCallback"));
	cl_int returnValue;
	returnValue = origMethod (
		memobj,
		user_data
	);
	return returnValue;
}


void *
clSVMAlloc
	(
		cl_context context ,
		cl_svm_mem_flags flags ,
		size_t size ,
		cl_uint alignment 
	)
{
	initialize ();
	std::cerr << "OCL> clSVMAlloc ()\n";	void *(* origMethod)
	(
		cl_context context ,
		cl_svm_mem_flags flags ,
		size_t size ,
		cl_uint alignment 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clSVMAlloc"));
	void * returnValue;
	returnValue = origMethod (
		context,
		flags,
		size,
		alignment
	);
	return returnValue;
}


void
clSVMFree
	(
		cl_context context ,
		void * svm_pointer 
	)
{
	initialize ();
	std::cerr << "OCL> clSVMFree ()\n";	void(* origMethod)
	(
		cl_context context ,
		void * svm_pointer 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clSVMFree"));
	origMethod (
		context,
		svm_pointer
	);
}


cl_sampler
clCreateSamplerWithProperties
	(
		cl_context context ,
		const cl_sampler_properties * sampler_properties ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateSamplerWithProperties ()\n";	cl_sampler(* origMethod)
	(
		cl_context context ,
		const cl_sampler_properties * sampler_properties ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateSamplerWithProperties"));
	cl_sampler returnValue;
	returnValue = origMethod (
		context,
		sampler_properties,
		errcode_ret
	);
	return returnValue;
}


cl_int
clRetainSampler
	(
		cl_sampler sampler 
	)
{
	initialize ();
	std::cerr << "OCL> clRetainSampler ()\n";	cl_int(* origMethod)
	(
		cl_sampler sampler 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clRetainSampler"));
	cl_int returnValue;
	returnValue = origMethod (
		sampler
	);
	return returnValue;
}


cl_int
clReleaseSampler
	(
		cl_sampler sampler 
	)
{
	initialize ();
	std::cerr << "OCL> clReleaseSampler ()\n";	cl_int(* origMethod)
	(
		cl_sampler sampler 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clReleaseSampler"));
	cl_int returnValue;
	returnValue = origMethod (
		sampler
	);
	return returnValue;
}


cl_int
clGetSamplerInfo
	(
		cl_sampler sampler ,
		cl_sampler_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clGetSamplerInfo ()\n";	cl_int(* origMethod)
	(
		cl_sampler sampler ,
		cl_sampler_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetSamplerInfo"));
	cl_int returnValue;
	returnValue = origMethod (
		sampler,
		param_name,
		param_value_size,
		param_value,
		param_value_size_ret
	);
	return returnValue;
}


cl_program
clCreateProgramWithSource
	(
		cl_context context ,
		cl_uint count ,
		const char * * strings ,
		const size_t * lengths ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateProgramWithSource ()\n";	cl_program(* origMethod)
	(
		cl_context context ,
		cl_uint count ,
		const char * * strings ,
		const size_t * lengths ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateProgramWithSource"));
	cl_program returnValue;
	returnValue = origMethod (
		context,
		count,
		strings,
		lengths,
		errcode_ret
	);
	return returnValue;
}


cl_program
clCreateProgramWithBinary
	(
		cl_context context ,
		cl_uint num_devices ,
		const cl_device_id * device_list ,
		const size_t * lengths ,
		const unsigned char * * binaries ,
		cl_int * binary_status ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateProgramWithBinary ()\n";	cl_program(* origMethod)
	(
		cl_context context ,
		cl_uint num_devices ,
		const cl_device_id * device_list ,
		const size_t * lengths ,
		const unsigned char * * binaries ,
		cl_int * binary_status ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateProgramWithBinary"));
	cl_program returnValue;
	returnValue = origMethod (
		context,
		num_devices,
		device_list,
		lengths,
		binaries,
		binary_status,
		errcode_ret
	);
	return returnValue;
}


cl_program
clCreateProgramWithBuiltInKernels
	(
		cl_context context ,
		cl_uint num_devices ,
		const cl_device_id * device_list ,
		const char * kernel_names ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateProgramWithBuiltInKernels ()\n";	cl_program(* origMethod)
	(
		cl_context context ,
		cl_uint num_devices ,
		const cl_device_id * device_list ,
		const char * kernel_names ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateProgramWithBuiltInKernels"));
	cl_program returnValue;
	returnValue = origMethod (
		context,
		num_devices,
		device_list,
		kernel_names,
		errcode_ret
	);
	return returnValue;
}


cl_program
clCreateProgramWithIL
	(
		cl_context context ,
		const void * il ,
		size_t length ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateProgramWithIL ()\n";	cl_program(* origMethod)
	(
		cl_context context ,
		const void * il ,
		size_t length ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateProgramWithIL"));
	cl_program returnValue;
	returnValue = origMethod (
		context,
		il,
		length,
		errcode_ret
	);
	return returnValue;
}


cl_int
clRetainProgram
	(
		cl_program program 
	)
{
	initialize ();
	std::cerr << "OCL> clRetainProgram ()\n";	cl_int(* origMethod)
	(
		cl_program program 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clRetainProgram"));
	cl_int returnValue;
	returnValue = origMethod (
		program
	);
	return returnValue;
}


cl_int
clReleaseProgram
	(
		cl_program program 
	)
{
	initialize ();
	std::cerr << "OCL> clReleaseProgram ()\n";	cl_int(* origMethod)
	(
		cl_program program 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clReleaseProgram"));
	cl_int returnValue;
	returnValue = origMethod (
		program
	);
	return returnValue;
}


cl_int
clBuildProgram
	(
		cl_program program ,
		cl_uint num_devices ,
		const cl_device_id * device_list ,
		const char * options ,
		void * user_data 
	)
{
	initialize ();
	std::cerr << "OCL> clBuildProgram ()\n";	cl_int(* origMethod)
	(
		cl_program program ,
		cl_uint num_devices ,
		const cl_device_id * device_list ,
		const char * options ,
		void * user_data 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clBuildProgram"));
	cl_int returnValue;
	returnValue = origMethod (
		program,
		num_devices,
		device_list,
		options,
		user_data
	);
	return returnValue;
}


cl_int
clCompileProgram
	(
		cl_program program ,
		cl_uint num_devices ,
		const cl_device_id * device_list ,
		const char * options ,
		cl_uint num_input_headers ,
		const cl_program * input_headers ,
		const char * * header_include_names ,
		void * user_data 
	)
{
	initialize ();
	std::cerr << "OCL> clCompileProgram ()\n";	cl_int(* origMethod)
	(
		cl_program program ,
		cl_uint num_devices ,
		const cl_device_id * device_list ,
		const char * options ,
		cl_uint num_input_headers ,
		const cl_program * input_headers ,
		const char * * header_include_names ,
		void * user_data 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCompileProgram"));
	cl_int returnValue;
	returnValue = origMethod (
		program,
		num_devices,
		device_list,
		options,
		num_input_headers,
		input_headers,
		header_include_names,
		user_data
	);
	return returnValue;
}


cl_program
clLinkProgram
	(
		cl_context context ,
		cl_uint num_devices ,
		const cl_device_id * device_list ,
		const char * options ,
		cl_uint num_input_programs ,
		const cl_program * input_programs ,
		void * user_data ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clLinkProgram ()\n";	cl_program(* origMethod)
	(
		cl_context context ,
		cl_uint num_devices ,
		const cl_device_id * device_list ,
		const char * options ,
		cl_uint num_input_programs ,
		const cl_program * input_programs ,
		void * user_data ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clLinkProgram"));
	cl_program returnValue;
	returnValue = origMethod (
		context,
		num_devices,
		device_list,
		options,
		num_input_programs,
		input_programs,
		user_data,
		errcode_ret
	);
	return returnValue;
}


cl_int
clSetProgramReleaseCallback
	(
		cl_program program ,
		void * user_data 
	)
{
	initialize ();
	std::cerr << "OCL> clSetProgramReleaseCallback ()\n";	cl_int(* origMethod)
	(
		cl_program program ,
		void * user_data 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clSetProgramReleaseCallback"));
	cl_int returnValue;
	returnValue = origMethod (
		program,
		user_data
	);
	return returnValue;
}


cl_int
clSetProgramSpecializationConstant
	(
		cl_program program ,
		cl_uint spec_id ,
		size_t spec_size ,
		const void * spec_value 
	)
{
	initialize ();
	std::cerr << "OCL> clSetProgramSpecializationConstant ()\n";	cl_int(* origMethod)
	(
		cl_program program ,
		cl_uint spec_id ,
		size_t spec_size ,
		const void * spec_value 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clSetProgramSpecializationConstant"));
	cl_int returnValue;
	returnValue = origMethod (
		program,
		spec_id,
		spec_size,
		spec_value
	);
	return returnValue;
}


cl_int
clUnloadPlatformCompiler
	(
		cl_platform_id platform 
	)
{
	initialize ();
	std::cerr << "OCL> clUnloadPlatformCompiler ()\n";	cl_int(* origMethod)
	(
		cl_platform_id platform 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clUnloadPlatformCompiler"));
	cl_int returnValue;
	returnValue = origMethod (
		platform
	);
	return returnValue;
}


cl_int
clGetProgramInfo
	(
		cl_program program ,
		cl_program_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clGetProgramInfo ()\n";	cl_int(* origMethod)
	(
		cl_program program ,
		cl_program_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetProgramInfo"));
	cl_int returnValue;
	returnValue = origMethod (
		program,
		param_name,
		param_value_size,
		param_value,
		param_value_size_ret
	);
	return returnValue;
}


cl_int
clGetProgramBuildInfo
	(
		cl_program program ,
		cl_device_id device ,
		cl_program_build_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clGetProgramBuildInfo ()\n";	cl_int(* origMethod)
	(
		cl_program program ,
		cl_device_id device ,
		cl_program_build_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetProgramBuildInfo"));
	cl_int returnValue;
	returnValue = origMethod (
		program,
		device,
		param_name,
		param_value_size,
		param_value,
		param_value_size_ret
	);
	return returnValue;
}


cl_kernel
clCreateKernel
	(
		cl_program program ,
		const char * kernel_name ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateKernel ()\n";	cl_kernel(* origMethod)
	(
		cl_program program ,
		const char * kernel_name ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateKernel"));
	cl_kernel returnValue;
	returnValue = origMethod (
		program,
		kernel_name,
		errcode_ret
	);
	return returnValue;
}


cl_int
clCreateKernelsInProgram
	(
		cl_program program ,
		cl_uint num_kernels ,
		cl_kernel * kernels ,
		cl_uint * num_kernels_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateKernelsInProgram ()\n";	cl_int(* origMethod)
	(
		cl_program program ,
		cl_uint num_kernels ,
		cl_kernel * kernels ,
		cl_uint * num_kernels_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateKernelsInProgram"));
	cl_int returnValue;
	returnValue = origMethod (
		program,
		num_kernels,
		kernels,
		num_kernels_ret
	);
	return returnValue;
}


cl_kernel
clCloneKernel
	(
		cl_kernel source_kernel ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCloneKernel ()\n";	cl_kernel(* origMethod)
	(
		cl_kernel source_kernel ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCloneKernel"));
	cl_kernel returnValue;
	returnValue = origMethod (
		source_kernel,
		errcode_ret
	);
	return returnValue;
}


cl_int
clRetainKernel
	(
		cl_kernel kernel 
	)
{
	initialize ();
	std::cerr << "OCL> clRetainKernel ()\n";	cl_int(* origMethod)
	(
		cl_kernel kernel 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clRetainKernel"));
	cl_int returnValue;
	returnValue = origMethod (
		kernel
	);
	return returnValue;
}


cl_int
clReleaseKernel
	(
		cl_kernel kernel 
	)
{
	initialize ();
	std::cerr << "OCL> clReleaseKernel ()\n";	cl_int(* origMethod)
	(
		cl_kernel kernel 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clReleaseKernel"));
	cl_int returnValue;
	returnValue = origMethod (
		kernel
	);
	return returnValue;
}


cl_int
clSetKernelArg
	(
		cl_kernel kernel ,
		cl_uint arg_index ,
		size_t arg_size ,
		const void * arg_value 
	)
{
	initialize ();
	std::cerr << "OCL> clSetKernelArg ()\n";	cl_int(* origMethod)
	(
		cl_kernel kernel ,
		cl_uint arg_index ,
		size_t arg_size ,
		const void * arg_value 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clSetKernelArg"));
	cl_int returnValue;
	returnValue = origMethod (
		kernel,
		arg_index,
		arg_size,
		arg_value
	);
	return returnValue;
}


cl_int
clSetKernelArgSVMPointer
	(
		cl_kernel kernel ,
		cl_uint arg_index ,
		const void * arg_value 
	)
{
	initialize ();
	std::cerr << "OCL> clSetKernelArgSVMPointer ()\n";	cl_int(* origMethod)
	(
		cl_kernel kernel ,
		cl_uint arg_index ,
		const void * arg_value 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clSetKernelArgSVMPointer"));
	cl_int returnValue;
	returnValue = origMethod (
		kernel,
		arg_index,
		arg_value
	);
	return returnValue;
}


cl_int
clSetKernelExecInfo
	(
		cl_kernel kernel ,
		cl_kernel_exec_info param_name ,
		size_t param_value_size ,
		const void * param_value 
	)
{
	initialize ();
	std::cerr << "OCL> clSetKernelExecInfo ()\n";	cl_int(* origMethod)
	(
		cl_kernel kernel ,
		cl_kernel_exec_info param_name ,
		size_t param_value_size ,
		const void * param_value 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clSetKernelExecInfo"));
	cl_int returnValue;
	returnValue = origMethod (
		kernel,
		param_name,
		param_value_size,
		param_value
	);
	return returnValue;
}


cl_int
clGetKernelInfo
	(
		cl_kernel kernel ,
		cl_kernel_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clGetKernelInfo ()\n";	cl_int(* origMethod)
	(
		cl_kernel kernel ,
		cl_kernel_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetKernelInfo"));
	cl_int returnValue;
	returnValue = origMethod (
		kernel,
		param_name,
		param_value_size,
		param_value,
		param_value_size_ret
	);
	return returnValue;
}


cl_int
clGetKernelArgInfo
	(
		cl_kernel kernel ,
		cl_uint arg_indx ,
		cl_kernel_arg_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clGetKernelArgInfo ()\n";	cl_int(* origMethod)
	(
		cl_kernel kernel ,
		cl_uint arg_indx ,
		cl_kernel_arg_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetKernelArgInfo"));
	cl_int returnValue;
	returnValue = origMethod (
		kernel,
		arg_indx,
		param_name,
		param_value_size,
		param_value,
		param_value_size_ret
	);
	return returnValue;
}


cl_int
clGetKernelWorkGroupInfo
	(
		cl_kernel kernel ,
		cl_device_id device ,
		cl_kernel_work_group_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clGetKernelWorkGroupInfo ()\n";	cl_int(* origMethod)
	(
		cl_kernel kernel ,
		cl_device_id device ,
		cl_kernel_work_group_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetKernelWorkGroupInfo"));
	cl_int returnValue;
	returnValue = origMethod (
		kernel,
		device,
		param_name,
		param_value_size,
		param_value,
		param_value_size_ret
	);
	return returnValue;
}


cl_int
clGetKernelSubGroupInfo
	(
		cl_kernel kernel ,
		cl_device_id device ,
		cl_kernel_sub_group_info param_name ,
		size_t input_value_size ,
		const void * input_value ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clGetKernelSubGroupInfo ()\n";	cl_int(* origMethod)
	(
		cl_kernel kernel ,
		cl_device_id device ,
		cl_kernel_sub_group_info param_name ,
		size_t input_value_size ,
		const void * input_value ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetKernelSubGroupInfo"));
	cl_int returnValue;
	returnValue = origMethod (
		kernel,
		device,
		param_name,
		input_value_size,
		input_value,
		param_value_size,
		param_value,
		param_value_size_ret
	);
	return returnValue;
}


cl_int
clWaitForEvents
	(
		cl_uint num_events ,
		const cl_event * event_list 
	)
{
	initialize ();
	std::cerr << "OCL> clWaitForEvents ()\n";	cl_int(* origMethod)
	(
		cl_uint num_events ,
		const cl_event * event_list 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clWaitForEvents"));
	cl_int returnValue;
	returnValue = origMethod (
		num_events,
		event_list
	);
	return returnValue;
}


cl_int
clGetEventInfo
	(
		cl_event event ,
		cl_event_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clGetEventInfo ()\n";	cl_int(* origMethod)
	(
		cl_event event ,
		cl_event_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetEventInfo"));
	cl_int returnValue;
	returnValue = origMethod (
		event,
		param_name,
		param_value_size,
		param_value,
		param_value_size_ret
	);
	return returnValue;
}


cl_event
clCreateUserEvent
	(
		cl_context context ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateUserEvent ()\n";	cl_event(* origMethod)
	(
		cl_context context ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateUserEvent"));
	cl_event returnValue;
	returnValue = origMethod (
		context,
		errcode_ret
	);
	return returnValue;
}


cl_int
clRetainEvent
	(
		cl_event event 
	)
{
	initialize ();
	std::cerr << "OCL> clRetainEvent ()\n";	cl_int(* origMethod)
	(
		cl_event event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clRetainEvent"));
	cl_int returnValue;
	returnValue = origMethod (
		event
	);
	return returnValue;
}


cl_int
clReleaseEvent
	(
		cl_event event 
	)
{
	initialize ();
	std::cerr << "OCL> clReleaseEvent ()\n";	cl_int(* origMethod)
	(
		cl_event event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clReleaseEvent"));
	cl_int returnValue;
	returnValue = origMethod (
		event
	);
	return returnValue;
}


cl_int
clSetUserEventStatus
	(
		cl_event event ,
		cl_int execution_status 
	)
{
	initialize ();
	std::cerr << "OCL> clSetUserEventStatus ()\n";	cl_int(* origMethod)
	(
		cl_event event ,
		cl_int execution_status 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clSetUserEventStatus"));
	cl_int returnValue;
	returnValue = origMethod (
		event,
		execution_status
	);
	return returnValue;
}


cl_int
clSetEventCallback
	(
		cl_event event ,
		cl_int command_exec_callback_type ,
		void * user_data 
	)
{
	initialize ();
	std::cerr << "OCL> clSetEventCallback ()\n";	cl_int(* origMethod)
	(
		cl_event event ,
		cl_int command_exec_callback_type ,
		void * user_data 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clSetEventCallback"));
	cl_int returnValue;
	returnValue = origMethod (
		event,
		command_exec_callback_type,
		user_data
	);
	return returnValue;
}


cl_int
clGetEventProfilingInfo
	(
		cl_event event ,
		cl_profiling_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clGetEventProfilingInfo ()\n";	cl_int(* origMethod)
	(
		cl_event event ,
		cl_profiling_info param_name ,
		size_t param_value_size ,
		void * param_value ,
		size_t * param_value_size_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetEventProfilingInfo"));
	cl_int returnValue;
	returnValue = origMethod (
		event,
		param_name,
		param_value_size,
		param_value,
		param_value_size_ret
	);
	return returnValue;
}


cl_int
clFlush
	(
		cl_command_queue command_queue 
	)
{
	initialize ();
	std::cerr << "OCL> clFlush ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clFlush"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue
	);
	return returnValue;
}


cl_int
clFinish
	(
		cl_command_queue command_queue 
	)
{
	initialize ();
	std::cerr << "OCL> clFinish ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clFinish"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue
	);
	return returnValue;
}


cl_int
clEnqueueReadBuffer
	(
		cl_command_queue command_queue ,
		cl_mem buffer ,
		cl_bool blocking_read ,
		size_t offset ,
		size_t size ,
		void * ptr ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueReadBuffer ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_mem buffer ,
		cl_bool blocking_read ,
		size_t offset ,
		size_t size ,
		void * ptr ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueReadBuffer"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		buffer,
		blocking_read,
		offset,
		size,
		ptr,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueReadBufferRect
	(
		cl_command_queue command_queue ,
		cl_mem buffer ,
		cl_bool blocking_read ,
		const size_t * buffer_origin ,
		const size_t * host_origin ,
		const size_t * region ,
		size_t buffer_row_pitch ,
		size_t buffer_slice_pitch ,
		size_t host_row_pitch ,
		size_t host_slice_pitch ,
		void * ptr ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueReadBufferRect ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_mem buffer ,
		cl_bool blocking_read ,
		const size_t * buffer_origin ,
		const size_t * host_origin ,
		const size_t * region ,
		size_t buffer_row_pitch ,
		size_t buffer_slice_pitch ,
		size_t host_row_pitch ,
		size_t host_slice_pitch ,
		void * ptr ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueReadBufferRect"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		buffer,
		blocking_read,
		buffer_origin,
		host_origin,
		region,
		buffer_row_pitch,
		buffer_slice_pitch,
		host_row_pitch,
		host_slice_pitch,
		ptr,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueWriteBuffer
	(
		cl_command_queue command_queue ,
		cl_mem buffer ,
		cl_bool blocking_write ,
		size_t offset ,
		size_t size ,
		const void * ptr ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueWriteBuffer ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_mem buffer ,
		cl_bool blocking_write ,
		size_t offset ,
		size_t size ,
		const void * ptr ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueWriteBuffer"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		buffer,
		blocking_write,
		offset,
		size,
		ptr,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueWriteBufferRect
	(
		cl_command_queue command_queue ,
		cl_mem buffer ,
		cl_bool blocking_write ,
		const size_t * buffer_origin ,
		const size_t * host_origin ,
		const size_t * region ,
		size_t buffer_row_pitch ,
		size_t buffer_slice_pitch ,
		size_t host_row_pitch ,
		size_t host_slice_pitch ,
		const void * ptr ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueWriteBufferRect ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_mem buffer ,
		cl_bool blocking_write ,
		const size_t * buffer_origin ,
		const size_t * host_origin ,
		const size_t * region ,
		size_t buffer_row_pitch ,
		size_t buffer_slice_pitch ,
		size_t host_row_pitch ,
		size_t host_slice_pitch ,
		const void * ptr ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueWriteBufferRect"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		buffer,
		blocking_write,
		buffer_origin,
		host_origin,
		region,
		buffer_row_pitch,
		buffer_slice_pitch,
		host_row_pitch,
		host_slice_pitch,
		ptr,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueFillBuffer
	(
		cl_command_queue command_queue ,
		cl_mem buffer ,
		const void * pattern ,
		size_t pattern_size ,
		size_t offset ,
		size_t size ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueFillBuffer ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_mem buffer ,
		const void * pattern ,
		size_t pattern_size ,
		size_t offset ,
		size_t size ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueFillBuffer"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		buffer,
		pattern,
		pattern_size,
		offset,
		size,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueCopyBuffer
	(
		cl_command_queue command_queue ,
		cl_mem src_buffer ,
		cl_mem dst_buffer ,
		size_t src_offset ,
		size_t dst_offset ,
		size_t size ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueCopyBuffer ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_mem src_buffer ,
		cl_mem dst_buffer ,
		size_t src_offset ,
		size_t dst_offset ,
		size_t size ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueCopyBuffer"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		src_buffer,
		dst_buffer,
		src_offset,
		dst_offset,
		size,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueCopyBufferRect
	(
		cl_command_queue command_queue ,
		cl_mem src_buffer ,
		cl_mem dst_buffer ,
		const size_t * src_origin ,
		const size_t * dst_origin ,
		const size_t * region ,
		size_t src_row_pitch ,
		size_t src_slice_pitch ,
		size_t dst_row_pitch ,
		size_t dst_slice_pitch ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueCopyBufferRect ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_mem src_buffer ,
		cl_mem dst_buffer ,
		const size_t * src_origin ,
		const size_t * dst_origin ,
		const size_t * region ,
		size_t src_row_pitch ,
		size_t src_slice_pitch ,
		size_t dst_row_pitch ,
		size_t dst_slice_pitch ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueCopyBufferRect"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		src_buffer,
		dst_buffer,
		src_origin,
		dst_origin,
		region,
		src_row_pitch,
		src_slice_pitch,
		dst_row_pitch,
		dst_slice_pitch,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueReadImage
	(
		cl_command_queue command_queue ,
		cl_mem image ,
		cl_bool blocking_read ,
		const size_t * origin ,
		const size_t * region ,
		size_t row_pitch ,
		size_t slice_pitch ,
		void * ptr ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueReadImage ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_mem image ,
		cl_bool blocking_read ,
		const size_t * origin ,
		const size_t * region ,
		size_t row_pitch ,
		size_t slice_pitch ,
		void * ptr ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueReadImage"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		image,
		blocking_read,
		origin,
		region,
		row_pitch,
		slice_pitch,
		ptr,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueWriteImage
	(
		cl_command_queue command_queue ,
		cl_mem image ,
		cl_bool blocking_write ,
		const size_t * origin ,
		const size_t * region ,
		size_t input_row_pitch ,
		size_t input_slice_pitch ,
		const void * ptr ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueWriteImage ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_mem image ,
		cl_bool blocking_write ,
		const size_t * origin ,
		const size_t * region ,
		size_t input_row_pitch ,
		size_t input_slice_pitch ,
		const void * ptr ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueWriteImage"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		image,
		blocking_write,
		origin,
		region,
		input_row_pitch,
		input_slice_pitch,
		ptr,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueFillImage
	(
		cl_command_queue command_queue ,
		cl_mem image ,
		const void * fill_color ,
		const size_t * origin ,
		const size_t * region ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueFillImage ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_mem image ,
		const void * fill_color ,
		const size_t * origin ,
		const size_t * region ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueFillImage"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		image,
		fill_color,
		origin,
		region,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueCopyImage
	(
		cl_command_queue command_queue ,
		cl_mem src_image ,
		cl_mem dst_image ,
		const size_t * src_origin ,
		const size_t * dst_origin ,
		const size_t * region ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueCopyImage ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_mem src_image ,
		cl_mem dst_image ,
		const size_t * src_origin ,
		const size_t * dst_origin ,
		const size_t * region ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueCopyImage"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		src_image,
		dst_image,
		src_origin,
		dst_origin,
		region,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueCopyImageToBuffer
	(
		cl_command_queue command_queue ,
		cl_mem src_image ,
		cl_mem dst_buffer ,
		const size_t * src_origin ,
		const size_t * region ,
		size_t dst_offset ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueCopyImageToBuffer ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_mem src_image ,
		cl_mem dst_buffer ,
		const size_t * src_origin ,
		const size_t * region ,
		size_t dst_offset ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueCopyImageToBuffer"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		src_image,
		dst_buffer,
		src_origin,
		region,
		dst_offset,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueCopyBufferToImage
	(
		cl_command_queue command_queue ,
		cl_mem src_buffer ,
		cl_mem dst_image ,
		size_t src_offset ,
		const size_t * dst_origin ,
		const size_t * region ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueCopyBufferToImage ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_mem src_buffer ,
		cl_mem dst_image ,
		size_t src_offset ,
		const size_t * dst_origin ,
		const size_t * region ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueCopyBufferToImage"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		src_buffer,
		dst_image,
		src_offset,
		dst_origin,
		region,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


void *
clEnqueueMapBuffer
	(
		cl_command_queue command_queue ,
		cl_mem buffer ,
		cl_bool blocking_map ,
		cl_map_flags map_flags ,
		size_t offset ,
		size_t size ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueMapBuffer ()\n";	void *(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_mem buffer ,
		cl_bool blocking_map ,
		cl_map_flags map_flags ,
		size_t offset ,
		size_t size ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueMapBuffer"));
	void * returnValue;
	returnValue = origMethod (
		command_queue,
		buffer,
		blocking_map,
		map_flags,
		offset,
		size,
		num_events_in_wait_list,
		event_wait_list,
		event,
		errcode_ret
	);
	return returnValue;
}


void *
clEnqueueMapImage
	(
		cl_command_queue command_queue ,
		cl_mem image ,
		cl_bool blocking_map ,
		cl_map_flags map_flags ,
		const size_t * origin ,
		const size_t * region ,
		size_t * image_row_pitch ,
		size_t * image_slice_pitch ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueMapImage ()\n";	void *(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_mem image ,
		cl_bool blocking_map ,
		cl_map_flags map_flags ,
		const size_t * origin ,
		const size_t * region ,
		size_t * image_row_pitch ,
		size_t * image_slice_pitch ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueMapImage"));
	void * returnValue;
	returnValue = origMethod (
		command_queue,
		image,
		blocking_map,
		map_flags,
		origin,
		region,
		image_row_pitch,
		image_slice_pitch,
		num_events_in_wait_list,
		event_wait_list,
		event,
		errcode_ret
	);
	return returnValue;
}


cl_int
clEnqueueUnmapMemObject
	(
		cl_command_queue command_queue ,
		cl_mem memobj ,
		void * mapped_ptr ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueUnmapMemObject ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_mem memobj ,
		void * mapped_ptr ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueUnmapMemObject"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		memobj,
		mapped_ptr,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueMigrateMemObjects
	(
		cl_command_queue command_queue ,
		cl_uint num_mem_objects ,
		const cl_mem * mem_objects ,
		cl_mem_migration_flags flags ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueMigrateMemObjects ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_uint num_mem_objects ,
		const cl_mem * mem_objects ,
		cl_mem_migration_flags flags ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueMigrateMemObjects"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		num_mem_objects,
		mem_objects,
		flags,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueNDRangeKernel
	(
		cl_command_queue command_queue ,
		cl_kernel kernel ,
		cl_uint work_dim ,
		const size_t * global_work_offset ,
		const size_t * global_work_size ,
		const size_t * local_work_size ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueNDRangeKernel ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_kernel kernel ,
		cl_uint work_dim ,
		const size_t * global_work_offset ,
		const size_t * global_work_size ,
		const size_t * local_work_size ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueNDRangeKernel"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		kernel,
		work_dim,
		global_work_offset,
		global_work_size,
		local_work_size,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueNativeKernel
	(
		cl_command_queue command_queue ,
		void * args ,
		size_t cb_args ,
		cl_uint num_mem_objects ,
		const cl_mem * mem_list ,
		const void * * args_mem_loc ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueNativeKernel ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		void * args ,
		size_t cb_args ,
		cl_uint num_mem_objects ,
		const cl_mem * mem_list ,
		const void * * args_mem_loc ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueNativeKernel"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		args,
		cb_args,
		num_mem_objects,
		mem_list,
		args_mem_loc,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueMarkerWithWaitList
	(
		cl_command_queue command_queue ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueMarkerWithWaitList ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueMarkerWithWaitList"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueBarrierWithWaitList
	(
		cl_command_queue command_queue ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueBarrierWithWaitList ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueBarrierWithWaitList"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueSVMFree
	(
		cl_command_queue command_queue ,
		cl_uint num_svm_pointers ,
		void * svm_pointers [],
		void * user_data ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueSVMFree ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_uint num_svm_pointers ,
		void * svm_pointers [],
		void * user_data ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueSVMFree"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		num_svm_pointers,
		svm_pointers,
		user_data,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueSVMMemcpy
	(
		cl_command_queue command_queue ,
		cl_bool blocking_copy ,
		void * dst_ptr ,
		const void * src_ptr ,
		size_t size ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueSVMMemcpy ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_bool blocking_copy ,
		void * dst_ptr ,
		const void * src_ptr ,
		size_t size ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueSVMMemcpy"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		blocking_copy,
		dst_ptr,
		src_ptr,
		size,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueSVMMemFill
	(
		cl_command_queue command_queue ,
		void * svm_ptr ,
		const void * pattern ,
		size_t pattern_size ,
		size_t size ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueSVMMemFill ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		void * svm_ptr ,
		const void * pattern ,
		size_t pattern_size ,
		size_t size ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueSVMMemFill"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		svm_ptr,
		pattern,
		pattern_size,
		size,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueSVMMap
	(
		cl_command_queue command_queue ,
		cl_bool blocking_map ,
		cl_map_flags flags ,
		void * svm_ptr ,
		size_t size ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueSVMMap ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_bool blocking_map ,
		cl_map_flags flags ,
		void * svm_ptr ,
		size_t size ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueSVMMap"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		blocking_map,
		flags,
		svm_ptr,
		size,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueSVMUnmap
	(
		cl_command_queue command_queue ,
		void * svm_ptr ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueSVMUnmap ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		void * svm_ptr ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueSVMUnmap"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		svm_ptr,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


cl_int
clEnqueueSVMMigrateMem
	(
		cl_command_queue command_queue ,
		cl_uint num_svm_pointers ,
		const void * * svm_pointers ,
		const size_t * sizes ,
		cl_mem_migration_flags flags ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueSVMMigrateMem ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_uint num_svm_pointers ,
		const void * * svm_pointers ,
		const size_t * sizes ,
		cl_mem_migration_flags flags ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueSVMMigrateMem"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		num_svm_pointers,
		svm_pointers,
		sizes,
		flags,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}


void *
clGetExtensionFunctionAddressForPlatform
	(
		cl_platform_id platform ,
		const char * func_name 
	)
{
	initialize ();
	std::cerr << "OCL> clGetExtensionFunctionAddressForPlatform ()\n";	void *(* origMethod)
	(
		cl_platform_id platform ,
		const char * func_name 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetExtensionFunctionAddressForPlatform"));
	void * returnValue;
	returnValue = origMethod (
		platform,
		func_name
	);
	return returnValue;
}


cl_int
clSetCommandQueueProperty
	(
		cl_command_queue command_queue ,
		cl_command_queue_properties properties ,
		cl_bool enable ,
		cl_command_queue_properties * old_properties 
	)
{
	initialize ();
	std::cerr << "OCL> clSetCommandQueueProperty ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_command_queue_properties properties ,
		cl_bool enable ,
		cl_command_queue_properties * old_properties 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clSetCommandQueueProperty"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		properties,
		enable,
		old_properties
	);
	return returnValue;
}


cl_mem
clCreateImage2D
	(
		cl_context context ,
		cl_mem_flags flags ,
		const cl_image_format * image_format ,
		size_t image_width ,
		size_t image_height ,
		size_t image_row_pitch ,
		void * host_ptr ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateImage2D ()\n";	cl_mem(* origMethod)
	(
		cl_context context ,
		cl_mem_flags flags ,
		const cl_image_format * image_format ,
		size_t image_width ,
		size_t image_height ,
		size_t image_row_pitch ,
		void * host_ptr ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateImage2D"));
	cl_mem returnValue;
	returnValue = origMethod (
		context,
		flags,
		image_format,
		image_width,
		image_height,
		image_row_pitch,
		host_ptr,
		errcode_ret
	);
	return returnValue;
}


cl_mem
clCreateImage3D
	(
		cl_context context ,
		cl_mem_flags flags ,
		const cl_image_format * image_format ,
		size_t image_width ,
		size_t image_height ,
		size_t image_depth ,
		size_t image_row_pitch ,
		size_t image_slice_pitch ,
		void * host_ptr ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateImage3D ()\n";	cl_mem(* origMethod)
	(
		cl_context context ,
		cl_mem_flags flags ,
		const cl_image_format * image_format ,
		size_t image_width ,
		size_t image_height ,
		size_t image_depth ,
		size_t image_row_pitch ,
		size_t image_slice_pitch ,
		void * host_ptr ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateImage3D"));
	cl_mem returnValue;
	returnValue = origMethod (
		context,
		flags,
		image_format,
		image_width,
		image_height,
		image_depth,
		image_row_pitch,
		image_slice_pitch,
		host_ptr,
		errcode_ret
	);
	return returnValue;
}


cl_int
clEnqueueMarker
	(
		cl_command_queue command_queue ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueMarker ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueMarker"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		event
	);
	return returnValue;
}


cl_int
clEnqueueWaitForEvents
	(
		cl_command_queue command_queue ,
		cl_uint num_events ,
		const cl_event * event_list 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueWaitForEvents ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_uint num_events ,
		const cl_event * event_list 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueWaitForEvents"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		num_events,
		event_list
	);
	return returnValue;
}


cl_int
clEnqueueBarrier
	(
		cl_command_queue command_queue 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueBarrier ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueBarrier"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue
	);
	return returnValue;
}


cl_int
clUnloadCompiler
	(
	)
{
	initialize ();
	std::cerr << "OCL> clUnloadCompiler ()\n";	cl_int(* origMethod)
	(
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clUnloadCompiler"));
	cl_int returnValue;
	returnValue = origMethod (
	);
	return returnValue;
}


void *
clGetExtensionFunctionAddress
	(
		const char * func_name 
	)
{
	initialize ();
	std::cerr << "OCL> clGetExtensionFunctionAddress ()\n";	void *(* origMethod)
	(
		const char * func_name 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clGetExtensionFunctionAddress"));
	void * returnValue;
	returnValue = origMethod (
		func_name
	);
	return returnValue;
}


cl_command_queue
clCreateCommandQueue
	(
		cl_context context ,
		cl_device_id device ,
		cl_command_queue_properties properties ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateCommandQueue ()\n";	cl_command_queue(* origMethod)
	(
		cl_context context ,
		cl_device_id device ,
		cl_command_queue_properties properties ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateCommandQueue"));
	cl_command_queue returnValue;
	returnValue = origMethod (
		context,
		device,
		properties,
		errcode_ret
	);
	return returnValue;
}


cl_sampler
clCreateSampler
	(
		cl_context context ,
		cl_bool normalized_coords ,
		cl_addressing_mode addressing_mode ,
		cl_filter_mode filter_mode ,
		cl_int * errcode_ret 
	)
{
	initialize ();
	std::cerr << "OCL> clCreateSampler ()\n";	cl_sampler(* origMethod)
	(
		cl_context context ,
		cl_bool normalized_coords ,
		cl_addressing_mode addressing_mode ,
		cl_filter_mode filter_mode ,
		cl_int * errcode_ret 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clCreateSampler"));
	cl_sampler returnValue;
	returnValue = origMethod (
		context,
		normalized_coords,
		addressing_mode,
		filter_mode,
		errcode_ret
	);
	return returnValue;
}


cl_int
clEnqueueTask
	(
		cl_command_queue command_queue ,
		cl_kernel kernel ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
{
	initialize ();
	std::cerr << "OCL> clEnqueueTask ()\n";	cl_int(* origMethod)
	(
		cl_command_queue command_queue ,
		cl_kernel kernel ,
		cl_uint num_events_in_wait_list ,
		const cl_event * event_wait_list ,
		cl_event * event 
	)
	= nullptr;
	origMethod = reinterpret_cast <decltype (origMethod)> (dlsym (RTLD_NEXT, "clEnqueueTask"));
	cl_int returnValue;
	returnValue = origMethod (
		command_queue,
		kernel,
		num_events_in_wait_list,
		event_wait_list,
		event
	);
	return returnValue;
}
